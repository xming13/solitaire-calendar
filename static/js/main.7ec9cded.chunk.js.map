{"version":3,"sources":["images/joker.png","component/Calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Calendar","year","Date","getFullYear","dayOfYear","date","start","diff","getTimezoneOffset","Math","floor","getDayOfYear","SUITS","RANKS","todaySolitaireMonthIndex","todaySolitaireWeekIndex","todaySolitaireDayInWeekIndex","useState","currentYear","setCurrentYear","currentSolitaireMonthIndex","setCurrentSolitaireMonthIndex","monthRank","yearSuit","suitCssClass","suit","Day","day","dayIndex","daysOfWeek","weekIndex","isToday","className","length","key","data-for","data-tip","JSON","stringify","onClick","newMonthIndex","style","display","justifyContent","src","joker","width","alt","isLeapYear","transform","map","DaysOfWeek","id","getContent","dataTip","ReactTooltip","rebuild","parse","dayInYear","seasonIndex","seasonWeekIndex","seasonSuit","seasonRank","html","clickable","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ec9cded.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/joker.ae567fe4.png\";","import React, { useState } from 'react'\nimport ReactTooltip from 'react-tooltip'\n\nimport './Calendar.css';\n\n// https://flyclipart.com/joker-icon-free-of-free-vector-emoji-joker-card-png-897578\nimport joker from '../../images/joker.png';\n\nfunction Calendar() {\n  /** Returns the day number in the year, value from 1 - 366\n   * e.g.\n   * - January 3 should be 3.\n   * - February 1 should be 32.\n   */\n  const getDayOfYear = (date) => {\n    const start = new Date(date.getFullYear(), 0, 0);\n    const diff = (date - start) + ((start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);\n    const oneDay = 1000 * 60 * 60 * 24;\n    return Math.floor(diff / oneDay);\n  }\n\n  const today = new Date();\n  const year = today.getFullYear();\n\n  const dayOfYear = getDayOfYear(new Date());\n\n  const SUITS = ['♦', '♣', '♥', '♠'];\n  const RANKS =['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'JOKER'];\n  const NUM_DAYS_IN_SOLITAIRE_MONTH = 28;\n  const NUM_DAYS_IN_WEEK = 7;\n\n  const daysOfWeeks = [\n    [1,2,3,4,5,6,7],\n    [8,9,10,11,12,13,14],\n    [15,16,17,18,19,20,21],\n    [22,23,24,25,26,27,28],\n  ];\n\n  // 0 - 12: A to K in RANKS.\n  const todaySolitaireMonthIndex = Math.floor((dayOfYear - 1) / NUM_DAYS_IN_SOLITAIRE_MONTH);\n\n  // 0 - 3: 1st to 4th week.\n  const todaySolitaireWeekIndex = Math.floor(((dayOfYear - 1) % NUM_DAYS_IN_SOLITAIRE_MONTH) / NUM_DAYS_IN_WEEK);\n\n  // 0 - 6: 1st to 7th day in the week.\n  const todaySolitaireDayInWeekIndex = Math.floor(((dayOfYear - 1) % NUM_DAYS_IN_SOLITAIRE_MONTH) % NUM_DAYS_IN_WEEK);\n\n  const [currentYear, setCurrentYear] = useState(year);\n  const [currentSolitaireMonthIndex, setCurrentSolitaireMonthIndex] = useState(todaySolitaireMonthIndex);\n\n  const monthRank = RANKS[currentSolitaireMonthIndex];\n  const yearSuit = SUITS[currentYear % 4];\n\n  const suitCssClass = suit => {\n    return suit === '♣' || suit === '♠' ? 'black' : 'red';\n  }\n\n  const isLeapYear = (year) => {\n    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n  }\n\n  const JokerMonth = function() {\n    return (\n      <div style={{display: 'flex', justifyContent: 'center'}}>\n        <img src={joker} width=\"50%\" alt=\"joker day\"/>\n        { isLeapYear(currentYear) && <img src={joker} width=\"50%\" alt=\"joker day\" style={{transform: 'rotateY(180deg)'}}/> }\n      </div>\n    )\n  };\n\n  const DaysOfWeek = (daysOfWeek, weekIndex) => {\n    return (\n      <div className=\"week\" key={weekIndex}>\n        {\n          daysOfWeek.map((day, dayIndex) => {\n            const isToday = year === currentYear\n              && todaySolitaireMonthIndex === currentSolitaireMonthIndex\n              && weekIndex === todaySolitaireWeekIndex\n              && dayIndex === todaySolitaireDayInWeekIndex\n            return Day(day, dayIndex, daysOfWeek, weekIndex, isToday);\n          })\n        }\n      </div>\n    )\n  }\n\n  const Day = (day, dayIndex, daysOfWeek, weekIndex, isToday) => {\n    const className = `day ${isToday && 'day--today'} ${dayIndex === 0 && 'day-of-week--first'} ${dayIndex === daysOfWeek.length - 1 && 'day-of-week--last'}`;\n\n    return (\n      <div className={className} key={dayIndex} data-for=\"tooltip-day\" data-tip={JSON.stringify({ day, dayIndex, weekIndex, isToday })}>\n        { dayIndex === 0 && <div className={`week-label ${suitCssClass(SUITS[weekIndex])}`}><div>{monthRank}</div><div>{SUITS[weekIndex]}</div></div> }\n        <div className=\"text\">{day}</div>\n        { dayIndex === daysOfWeek.length - 1 && <div className={`week-label week-label--end ${suitCssClass(SUITS[weekIndex])}`}><div>{monthRank}</div><div>{SUITS[weekIndex]}</div></div> }\n      </div>\n    )\n  }\n\n  const handleIncrementMonth = () => {\n    const newMonthIndex = (currentSolitaireMonthIndex + 1) % RANKS.length;\n    setCurrentSolitaireMonthIndex(newMonthIndex);\n\n    if (newMonthIndex === 0) {\n      setCurrentYear(currentYear + 1);\n    }\n  }\n\n  const handleDecrementMonth = () => {\n    const newMonthIndex = (RANKS.length + currentSolitaireMonthIndex - 1) % RANKS.length;\n    setCurrentSolitaireMonthIndex(newMonthIndex);\n\n    if (newMonthIndex === RANKS.length - 1) {\n      setCurrentYear(currentYear - 1);\n    }\n  }\n\n  const getTooltipContent = (dataTip) => {\n    ReactTooltip.rebuild();\n\n    if (!dataTip) {\n      return null;\n    }\n\n    const { day, dayIndex, weekIndex, isToday } = JSON.parse(dataTip);\n\n    // 1 - 366\n    const dayInYear = currentSolitaireMonthIndex * NUM_DAYS_IN_SOLITAIRE_MONTH + weekIndex * NUM_DAYS_IN_WEEK + dayIndex + 1;\n\n    // Find card by season\n    const NUM_DAYS_IN_13_WEEKS = 13 * NUM_DAYS_IN_WEEK;\n\n    // 0 - 5\n    const seasonIndex = Math.floor((dayInYear - 1) / NUM_DAYS_IN_13_WEEKS);\n    const seasonWeekIndex = Math.floor((dayInYear - 1) % NUM_DAYS_IN_13_WEEKS / NUM_DAYS_IN_WEEK);\n    const seasonSuit = SUITS[seasonIndex];\n    const seasonRank = RANKS[seasonWeekIndex];\n\n    return `\nday in year: ${dayInYear}\n<br>    \nMonth: <span class=\"${suitCssClass(yearSuit)}\">${yearSuit}${monthRank}</span>\n<br>      \nWeek : <span class=\"${suitCssClass(SUITS[weekIndex])}\">${SUITS[weekIndex]}${monthRank}</span>\n<br>\nSeason: <span class=\"${suitCssClass(seasonSuit)}\">${seasonSuit}${seasonRank}</span>\n`;\n  }\n\n  return (\n    <div className=\"calendar\">\n      <div className=\"calendar-container\">\n        <div className=\"calendar--header\">\n          <div className=\"year\">{yearSuit} {currentYear}</div>\n          {/*<div className=\"year invisible\">{yearSuit} {year}</div>*/}\n          <div className=\"month\">\n            <div className=\"arrow arrow--left\" onClick={handleDecrementMonth}>&lt;</div>\n            <div>{monthRank === 'JOKER' ? monthRank : `The month of ${monthRank}`}</div>\n            <div className=\"arrow arrow--right\" onClick={handleIncrementMonth}>&gt;</div>\n          </div>\n        </div>\n        <div className=\"calendar--body\">\n          {/*<div className=\"days-label\">*/}\n          {/*  <div className=\"day-label\">Sun</div>*/}\n          {/*  <div className=\"day-label\">Mon</div>*/}\n          {/*  <div className=\"day-label\">Tue</div>*/}\n          {/*  <div className=\"day-label\">Wed</div>*/}\n          {/*  <div className=\"day-label\">Thu</div>*/}\n          {/*  <div className=\"day-label\">Fri</div>*/}\n          {/*  <div className=\"day-label\">Sat</div>*/}\n          {/*</div>*/}\n          { currentSolitaireMonthIndex === 13 ? <JokerMonth /> : daysOfWeeks.map((daysOfWeek, weekIndex) => DaysOfWeek(daysOfWeek, weekIndex)) }\n\n        </div>\n      </div>\n\n      <ReactTooltip id=\"tooltip-day\" getContent={getTooltipContent} html={true} className=\"tooltip-day\" clickable={true} />\n    </div>\n  )\n}\n\nexport default Calendar;","import React from 'react';\nimport Calendar from './component/Calendar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calendar />\n\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n        {/*<p>*/}\n        {/*  Edit <code>src/App.js</code> and save to reload.*/}\n        {/*</p>*/}\n        {/*<a*/}\n        {/*  className=\"App-link\"*/}\n        {/*  href=\"https://reactjs.org\"*/}\n        {/*  target=\"_blank\"*/}\n        {/*  rel=\"noopener noreferrer\"*/}\n        {/*>*/}\n        {/*  Learn React*/}\n        {/*</a>*/}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}