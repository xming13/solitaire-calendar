{"version":3,"sources":["component/Calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","today","Date","year","getFullYear","month","getMonth","suits","monthRank","yearSuit","suitCssClass","suit","className","onClick","map","daysOfWeek","weekIndex","key","day","dayIndex","length","Day","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QA+EeA,MA5Ef,WACE,IAAMC,EAAQ,IAAIC,KAGZC,EAAOF,EAAMG,cACbC,EAAQJ,EAAMK,WAOdC,EAAQ,CAAC,SAAK,SAAK,SAAK,UAExBC,EADO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7CH,GAClBI,EAAWF,EAAMJ,EAAO,GAExBO,EAAe,SAAAC,GACnB,MAAgB,WAATA,GAAyB,WAATA,EAAe,QAAU,OAuBlD,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,QAAQH,EAAvB,IAAkCN,GAElC,yBAAKS,UAAU,SACb,yBAAKA,UAAU,oBAAoBC,QAXhB,cAWnB,KACA,6CAAmBL,GACnB,yBAAKI,UAAU,qBAAqBC,QAjBjB,cAiBnB,OAGJ,yBAAKD,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,aAAf,OACA,yBAAKA,UAAU,aAAf,OACA,yBAAKA,UAAU,aAAf,OACA,yBAAKA,UAAU,aAAf,OACA,yBAAKA,UAAU,aAAf,OACA,yBAAKA,UAAU,aAAf,OACA,yBAAKA,UAAU,aAAf,QAvDU,CAClB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACb,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IACjB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IACnB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAsDCE,KAAI,SAACC,EAAYC,GAAb,OACd,yBAAKJ,UAAU,OAAOK,IAAKD,GACvBD,EAAWD,KAAI,SAACI,EAAKC,GAAN,OA7CnB,SAACD,EAAKC,EAAUJ,EAAYC,GACtC,IAAMJ,EAAS,cAAuB,IAAbO,GAAkB,qBAA5B,YAAoDA,IAAaJ,EAAWK,OAAS,GAAK,qBAEzG,OACE,yBAAKR,UAAWA,EAAWK,IAAKE,GACf,IAAbA,GAAkB,yBAAKP,UAAS,qBAAgBF,EAAaH,EAAMS,MAAe,6BAAMR,GAAgB,6BAAMD,EAAMS,KACtH,yBAAKJ,UAAU,QAAQM,GACrBC,IAAaJ,EAAWK,OAAS,GAAK,yBAAKR,UAAS,qCAAgCF,EAAaH,EAAMS,MAAe,6BAAMR,GAAgB,6BAAMD,EAAMS,MAsC9GK,CAAIH,EAAKC,EAAUJ,EAAYC,c,MC1CpEM,MAvBf,WACE,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.81f932da.chunk.js","sourcesContent":["import React from 'react'\nimport './Calendar.css';\n\nfunction Calendar() {\n  const today = new Date();\n\n  // @TODO: implement actual logic for mapping date to solitaire calendar\n  const year = today.getFullYear();\n  const month = today.getMonth();\n  const daysOfWeeks = [\n    [1,2,3,4,5,6,7],\n    [8,9,10,11,12,13,14],\n    [15,16,17,18,19,20,21],\n    [22,23,24,25,26,27,28],\n  ];\n  const suits = ['♦', '♣', '♥', '♠'];\n  const ranks =['A', '2', '3', '4', '5', '6', '7', '8', '9', 'J', 'Q', 'K'];\n  const monthRank = ranks[month];\n  const yearSuit = suits[year % 4];\n\n  const suitCssClass = suit => {\n    return suit === '♣' || suit === '♠' ? 'black' : 'red';\n  }\n\n  const Day = (day, dayIndex, daysOfWeek, weekIndex) => {\n    const className = `day ${dayIndex === 0 && 'day-of-week--first'} ${dayIndex === daysOfWeek.length - 1 && 'day-of-week--last'}`;\n\n    return (\n      <div className={className} key={dayIndex}>\n        { dayIndex === 0 && <div className={`week-label ${suitCssClass(suits[weekIndex])}`}><div>{monthRank}</div><div>{suits[weekIndex]}</div></div> }\n        <div className=\"text\">{day}</div>\n        { dayIndex === daysOfWeek.length - 1 && <div className={`week-label week-label--end ${suitCssClass(suits[weekIndex])}`}><div>{monthRank}</div><div>{suits[weekIndex]}</div></div> }\n      </div>\n    )\n  }\n\n  const handleIncrementMonth = () => {\n    // @TODO\n  }\n\n  const handleDecrementMonth = () => {\n    // @TODO\n  }\n\n  return (\n    <div className=\"calendar\">\n      <div className=\"calendar-container\">\n        <div className=\"calendar--header\">\n          <div className=\"year\">{yearSuit} {year}</div>\n          {/*<div className=\"year invisible\">{yearSuit} {year}</div>*/}\n          <div className=\"month\">\n            <div className=\"arrow arrow--left\" onClick={handleDecrementMonth}>&lt;</div>\n            <div>The month of {monthRank}</div>\n            <div className=\"arrow arrow--right\" onClick={handleIncrementMonth}>&gt;</div>\n          </div>\n        </div>\n        <div className=\"calendar--body\">\n          <div className=\"days-label\">\n            <div className=\"day-label\">Sun</div>\n            <div className=\"day-label\">Mon</div>\n            <div className=\"day-label\">Tue</div>\n            <div className=\"day-label\">Wed</div>\n            <div className=\"day-label\">Thu</div>\n            <div className=\"day-label\">Fri</div>\n            <div className=\"day-label\">Sat</div>\n          </div>\n          {\n            daysOfWeeks.map((daysOfWeek, weekIndex) => (\n              <div className=\"week\" key={weekIndex}>\n                { daysOfWeek.map((day, dayIndex) => Day(day, dayIndex, daysOfWeek, weekIndex)) }\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Calendar;","import React from 'react';\nimport Calendar from './component/Calendar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calendar />\n\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n        {/*<p>*/}\n        {/*  Edit <code>src/App.js</code> and save to reload.*/}\n        {/*</p>*/}\n        {/*<a*/}\n        {/*  className=\"App-link\"*/}\n        {/*  href=\"https://reactjs.org\"*/}\n        {/*  target=\"_blank\"*/}\n        {/*  rel=\"noopener noreferrer\"*/}\n        {/*>*/}\n        {/*  Learn React*/}\n        {/*</a>*/}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}